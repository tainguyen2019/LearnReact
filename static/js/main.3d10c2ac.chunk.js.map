{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","classes","this","getBagdeClasses","className","formatCount","onClick","props","onIncrement","counter","onDecrement","disabled","value","onDelete","id","count","Component","Counters","onReset","counters","map","key","NavBar","href","App","state","response","error","handleDelete","counterID","filter","c","setState","handleDecrement","index","indexOf","handleIncrement","handleReset","fetch","then","res","json","result","catch","message","path","exact","length","item","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3d10c2ac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  render() {\r\n    let classes = this.getBagdeClasses();\r\n    return (\r\n      <div className=\"mb-4\">\r\n        <span className={classes}>{this.formatCount()}</span>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"btn btn-warning btn-sm ml-2\"\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          disabled={this.props.counter.value === 0}\r\n        >\r\n          -\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger btn-sm ml-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBagdeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const count = this.props.counter.value;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement, onDecrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={onReset}\r\n        >\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            Navbar{\" \"}\r\n            <span className=\"badge badge-pill badge-secondary\">\r\n              {this.props.count}\r\n            </span>\r\n          </a>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\nimport Counters from './components/counters';\r\nimport Navbar from './components/navbar';\r\nimport './App.css';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 0 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 },\r\n    ],\r\n    response: [],\r\n    error: ''\r\n  };\r\n\r\n  handleDelete = (counterID) => {\r\n    const counters = this.state.counters.filter(c => c.id !== counterID);\r\n    this.setState({ counters: counters });\r\n  };\r\n\r\n  handleDecrement = (counter) => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index].value--;\r\n    this.setState({ counters });\r\n  };\r\n  handleIncrement = (counter) => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index].value++;\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map(c => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n\r\n    this.setState({ counters });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\r\n      .then(res => res.json())\r\n      .then(result => this.setState({ response: result }))\r\n      .catch(error => this.setState({ error: error.message }));\r\n  }\r\n\r\n  render() {\r\n    const { error, response } = this.state;\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/simple-counter-app\" exact><Navbar count={this.state.counters.filter(c => c.value > 0).length} />\r\n            <main className=\"container\">\r\n              <Counters\r\n                counters={this.state.counters}\r\n                onIncrement={this.handleIncrement}\r\n                onDecrement={this.handleDecrement}\r\n                onDelete={this.handleDelete}\r\n                onReset={this.handleReset}\r\n              />\r\n              <strong>Fetch Data from https://jsonplaceholder.typicode.com/todos</strong>\r\n              <ul>\r\n                {error || response.map(item => (\r\n                  <li key={item.id}>\r\n                    {item.id} {item.title}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </main>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}